// Objective-C API for talking to github.com/xxf098/go-tun2socks-build Go package.
//   gobind -lang=objc github.com/xxf098/go-tun2socks-build
//
// File is generated by gobind. Do not edit.

#ifndef __Tun2socks_H__
#define __Tun2socks_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class Tun2socksShadowsocks;
@class Tun2socksTrojan;
@class Tun2socksVless;
@class Tun2socksVmess;
@class Tun2socksVmessOptions;
@protocol Tun2socksLogService;
@class Tun2socksLogService;
@protocol Tun2socksPacketFlow;
@class Tun2socksPacketFlow;
@protocol Tun2socksQuerySpeed;
@class Tun2socksQuerySpeed;
@protocol Tun2socksTestDownload;
@class Tun2socksTestDownload;
@protocol Tun2socksTestLatency;
@class Tun2socksTestLatency;
@protocol Tun2socksTestLatencyStop;
@class Tun2socksTestLatencyStop;
@protocol Tun2socksVpnService;
@class Tun2socksVpnService;

@protocol Tun2socksLogService <NSObject>
- (BOOL)writeLog:(NSString* _Nullable)s error:(NSError* _Nullable* _Nullable)error;
@end

@protocol Tun2socksPacketFlow <NSObject>
/**
 * WritePacket should writes packets to the TUN fd.
 */
- (void)writePacket:(NSData* _Nullable)packet;
@end

@protocol Tun2socksQuerySpeed <NSObject>
- (void)updateTraffic:(int64_t)up down:(int64_t)down;
@end

@protocol Tun2socksTestDownload <NSObject>
- (void)updateSpeed:(long)id_ speed:(int64_t)speed elapse:(int64_t)elapse;
- (void)updateTraffic:(long)id_ traffic:(int64_t)traffic;
@end

@protocol Tun2socksTestLatency <NSObject>
- (void)updateLatency:(long)id_ elapsed:(int64_t)elapsed;
@end

@protocol Tun2socksTestLatencyStop <NSObject>
- (BOOL)updateLatency:(long)id_ elapsed:(int64_t)elapsed;
@end

@protocol Tun2socksVpnService <NSObject>
/**
 * Protect is just a proxy to the VpnService.protect() method.
See also: https://developer.android.com/reference/android/net/VpnService.html#protect(int)
 */
- (BOOL)protect:(long)fd;
@end

@interface Tun2socksShadowsocks : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull add;
@property (nonatomic) long port;
@property (nonatomic) NSString* _Nonnull password;
@property (nonatomic) NSString* _Nonnull method;
// skipped field Shadowsocks.VmessOptions with unsupported type: github.com/xxf098/go-tun2socks-build/features.VmessOptions

@end

@interface Tun2socksTrojan : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)Add Port:(long)Port Password:(NSString* _Nullable)Password SNI:(NSString* _Nullable)SNI SkipCertVerify:(BOOL)SkipCertVerify Net:(NSString* _Nullable)Net Path:(NSString* _Nullable)Path Host:(NSString* _Nullable)Host opt:(NSData* _Nullable)opt;
@property (nonatomic) NSString* _Nonnull add;
@property (nonatomic) long port;
@property (nonatomic) NSString* _Nonnull password;
@property (nonatomic) NSString* _Nonnull sni;
@property (nonatomic) BOOL skipCertVerify;
@property (nonatomic) NSString* _Nonnull net;
@property (nonatomic) NSString* _Nonnull path;
@property (nonatomic) NSString* _Nonnull host;
// skipped field Trojan.VmessOptions with unsupported type: github.com/xxf098/go-tun2socks-build/features.VmessOptions

@end

@interface Tun2socksVless : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)Add Port:(long)Port ID:(NSString* _Nullable)ID TLS:(NSString* _Nullable)TLS HeaderType:(NSString* _Nullable)HeaderType Encryption:(NSString* _Nullable)Encryption Net:(NSString* _Nullable)Net Flow:(NSString* _Nullable)Flow Security:(NSString* _Nullable)Security Path:(NSString* _Nullable)Path Host:(NSString* _Nullable)Host SNI:(NSString* _Nullable)SNI opt:(NSData* _Nullable)opt;
@property (nonatomic) NSString* _Nonnull tls;
@property (nonatomic) NSString* _Nonnull add;
@property (nonatomic) long port;
@property (nonatomic) NSString* _Nonnull net;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull type;
@property (nonatomic) NSString* _Nonnull security;
@property (nonatomic) NSString* _Nonnull encryption;
@property (nonatomic) NSString* _Nonnull flow;
@property (nonatomic) NSString* _Nonnull protocol;
@property (nonatomic) NSString* _Nonnull path;
@property (nonatomic) NSString* _Nonnull host;
@property (nonatomic) NSString* _Nonnull sni;
// skipped field Vless.VmessOptions with unsupported type: github.com/xxf098/go-tun2socks-build/features.VmessOptions

@end

@interface Tun2socksVmess : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * TODO: default value
 */
- (nullable instancetype)init:(NSString* _Nullable)Host Path:(NSString* _Nullable)Path TLS:(NSString* _Nullable)TLS Add:(NSString* _Nullable)Add Port:(long)Port Aid:(long)Aid Net:(NSString* _Nullable)Net ID:(NSString* _Nullable)ID Type:(NSString* _Nullable)Type Security:(NSString* _Nullable)Security opt:(NSData* _Nullable)opt;
@property (nonatomic) NSString* _Nonnull host;
@property (nonatomic) NSString* _Nonnull path;
@property (nonatomic) NSString* _Nonnull tls;
@property (nonatomic) NSString* _Nonnull add;
@property (nonatomic) long port;
@property (nonatomic) long aid;
@property (nonatomic) NSString* _Nonnull net;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull type;
@property (nonatomic) NSString* _Nonnull security;
@property (nonatomic) NSString* _Nonnull encryption;
@property (nonatomic) NSString* _Nonnull flow;
@property (nonatomic) NSString* _Nonnull sni;
@property (nonatomic) NSString* _Nonnull protocol;
// skipped field Vmess.VmessOptions with unsupported type: github.com/xxf098/go-tun2socks-build/features.VmessOptions

// skipped field Vmess.Trojan with unsupported type: *github.com/xxf098/go-tun2socks-build/features.Trojan

// skipped field Vmess.Shadowsocks with unsupported type: *github.com/xxf098/go-tun2socks-build/features.Shadowsocks

@end

@interface Tun2socksVmessOptions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL useIPv6;
@property (nonatomic) NSString* _Nonnull loglevel;
@property (nonatomic) long routeMode;
@property (nonatomic) BOOL disableDNSCache;
@property (nonatomic) BOOL enableSniffing;
@property (nonatomic) NSString* _Nonnull dns;
@property (nonatomic) BOOL allowInsecure;
@property (nonatomic) long mux;
@property (nonatomic) long localPort;
@property (nonatomic) NSString* _Nonnull serverName;
@end

FOUNDATION_EXPORT const int64_t Tun2socksAddrTypeFQDN;
FOUNDATION_EXPORT const int64_t Tun2socksAddrTypeIPv4;
FOUNDATION_EXPORT const int64_t Tun2socksAddrTypeIPv6;
FOUNDATION_EXPORT const int64_t Tun2socksAuthMethodNotRequired;
FOUNDATION_EXPORT const int64_t Tun2socksSocksCmdConnect;
FOUNDATION_EXPORT const int64_t Tun2socksStatusSucceeded;
FOUNDATION_EXPORT const int64_t Tun2socksVersion5;

FOUNDATION_EXPORT BOOL Tun2socksBatchRenderTestDownload(NSString* _Nullable link, long concurrency, NSString* _Nullable fontPath, NSString* _Nullable pngPath, NSString* _Nullable language, NSString* _Nullable urlGroup, id<Tun2socksTestDownload> _Nullable testDownload, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksBatchTestDownload(NSString* _Nullable link, long concurrency, id<Tun2socksTestDownload> _Nullable testDownload, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void Tun2socksBatchTestLatency(NSString* _Nullable link, long concurrency, id<Tun2socksTestLatency> _Nullable testLatency);

/**
 * FIXME: block on startup
 */
FOUNDATION_EXPORT void Tun2socksBatchTestVmessCoreLatency(NSString* _Nullable link, long concurrency, id<Tun2socksTestLatency> _Nullable testLatency);

FOUNDATION_EXPORT NSString* _Nonnull Tun2socksCheckVersion(void);

FOUNDATION_EXPORT NSString* _Nonnull Tun2socksCheckXVersion(void);

FOUNDATION_EXPORT Tun2socksVmess* _Nullable Tun2socksConvertJSONToVmess(NSData* _Nullable configBytes, NSError* _Nullable* _Nullable error);

/**
 * TODO: update base on version
 */
FOUNDATION_EXPORT BOOL Tun2socksCopyAssets(NSString* _Nullable assetDir, BOOL force, NSError* _Nullable* _Nullable error);

// skipped function DecodeJSONConfig with unsupported parameter or return types


FOUNDATION_EXPORT NSString* _Nonnull Tun2socksGenerateVmessString(Tun2socksVmess* _Nullable profile, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksGetFreePort(long* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * Write IP packets to the lwIP stack. Call this function in the main loop of
the VpnService in Java/Kotlin, which should reads packets from the TUN fd.
 */
FOUNDATION_EXPORT void Tun2socksInputPacket(NSData* _Nullable data);

FOUNDATION_EXPORT Tun2socksVmess* _Nullable Tun2socksNewLiteShadowSocks(NSString* _Nullable Add, long Port, NSString* _Nullable ID, NSString* _Nullable Security, NSData* _Nullable opt);

FOUNDATION_EXPORT Tun2socksShadowsocks* _Nullable Tun2socksNewShadowSocks(NSString* _Nullable Add, long Port, NSString* _Nullable Password, NSString* _Nullable Method, NSData* _Nullable opt);

FOUNDATION_EXPORT Tun2socksTrojan* _Nullable Tun2socksNewTrojan(NSString* _Nullable Add, long Port, NSString* _Nullable Password, NSString* _Nullable SNI, BOOL SkipCertVerify, NSString* _Nullable Net, NSString* _Nullable Path, NSString* _Nullable Host, NSData* _Nullable opt);

FOUNDATION_EXPORT Tun2socksVless* _Nullable Tun2socksNewVless(NSString* _Nullable Add, long Port, NSString* _Nullable ID, NSString* _Nullable TLS, NSString* _Nullable HeaderType, NSString* _Nullable Encryption, NSString* _Nullable Net, NSString* _Nullable Flow, NSString* _Nullable Security, NSString* _Nullable Path, NSString* _Nullable Host, NSString* _Nullable SNI, NSData* _Nullable opt);

/**
 * TODO: default value
 */
FOUNDATION_EXPORT Tun2socksVmess* _Nullable Tun2socksNewVmess(NSString* _Nullable Host, NSString* _Nullable Path, NSString* _Nullable TLS, NSString* _Nullable Add, long Port, long Aid, NSString* _Nullable Net, NSString* _Nullable ID, NSString* _Nullable Type, NSString* _Nullable Security, NSData* _Nullable opt);

/**
 * convert clash file to vmess/trojan links, links are separated by newline(\n)
 */
FOUNDATION_EXPORT NSString* _Nonnull Tun2socksParseClash(NSString* _Nullable message, NSError* _Nullable* _Nullable error);

/**
 * get top n links of clash file
 */
FOUNDATION_EXPORT NSString* _Nonnull Tun2socksPeekClash(NSString* _Nullable message, long n, NSError* _Nullable* _Nullable error);

/**
 * add in v2ray-core v4.26.0
 */
FOUNDATION_EXPORT int64_t Tun2socksQueryOutboundStats(NSString* _Nullable tag, NSString* _Nullable direct);

FOUNDATION_EXPORT int64_t Tun2socksQueryOutboundXStats(NSString* _Nullable tag, NSString* _Nullable direct);

/**
 * ~/go/src/github.com/v2fly/v2ray-core/v4/proxy/vmess/outbound/outbound.go
 */
FOUNDATION_EXPORT int64_t Tun2socksQueryStats(NSString* _Nullable direct);

/**
 * resolve dns
 */
FOUNDATION_EXPORT NSString* _Nonnull Tun2socksResolve(NSString* _Nullable addr, BOOL enableIPv6, NSString* _Nullable hostname, NSError* _Nullable* _Nullable error);

/**
 * SetLocalDNS sets the DNS server that used by Go's default resolver, it accepts
string in the form "host:port", e.g. 223.5.5.5:53
 */
FOUNDATION_EXPORT void Tun2socksSetLocalDNS(NSString* _Nullable dns);

/**
 * SetNonblock puts the fd in blocking or non-blocking mode.
 */
FOUNDATION_EXPORT BOOL Tun2socksSetNonblock(long fd, BOOL nonblocking);

FOUNDATION_EXPORT BOOL Tun2socksStartShadowsocksTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksShadowsocks* _Nullable shadowsocks, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartTrojan(id<Tun2socksPacketFlow> _Nullable packetFlow, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, Tun2socksTrojan* _Nullable trojan, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartTrojanTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksTrojan* _Nullable trojan, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

/**
 * StartV2Ray sets up lwIP stack, starts a V2Ray instance and registers the instance as the
connection handler for tun2socks.
 */
FOUNDATION_EXPORT BOOL Tun2socksStartV2Ray(id<Tun2socksPacketFlow> _Nullable packetFlow, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, NSData* _Nullable configBytes, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartV2RayLiteWithTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksVmess* _Nullable profile, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartV2RayWithTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksVmess* _Nullable profile, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

/**
 * StartV2Ray sets up lwIP stack, starts a V2Ray instance and registers the instance as the
connection handler for tun2socks.
 */
FOUNDATION_EXPORT BOOL Tun2socksStartV2RayWithVmess(id<Tun2socksPacketFlow> _Nullable packetFlow, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, Tun2socksVmess* _Nullable profile, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartXRay(id<Tun2socksPacketFlow> _Nullable packetFlow, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, NSData* _Nullable configBytes, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartXRayWithTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksVmess* _Nullable profile, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartXShadowsocksTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksShadowsocks* _Nullable shadowsocks, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartXTrojanTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksTrojan* _Nullable trojan, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksStartXVlessTunFd(long tunFd, id<Tun2socksVpnService> _Nullable vpnService, id<Tun2socksLogService> _Nullable logService, id<Tun2socksQuerySpeed> _Nullable querySpeed, Tun2socksVless* _Nullable vl, NSString* _Nullable assetPath, NSError* _Nullable* _Nullable error);

/**
 * StopV2Ray stop v2ray
 */
FOUNDATION_EXPORT void Tun2socksStopV2Ray(void);

FOUNDATION_EXPORT BOOL Tun2socksTestConfig(NSString* _Nullable ConfigureFileContent, NSString* _Nullable assetperfix, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksTestConfigLatency(NSData* _Nullable configBytes, NSString* _Nullable assetPath, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksTestLinkDownloadSpeed(NSString* _Nullable link, id<Tun2socksTestLatencyStop> _Nullable cb, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksTestTCPPing(NSString* _Nullable host, long port, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksTestTrojanLatency(Tun2socksTrojan* _Nullable trojan, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL Tun2socksTestURLLatency(NSString* _Nullable url, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

// skipped function TestVmessDownload with unsupported parameter or return types


FOUNDATION_EXPORT BOOL Tun2socksTestVmessLatency(Tun2socksVmess* _Nullable profile, long port, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * TODO: support more protocol
 */
FOUNDATION_EXPORT BOOL Tun2socksTestVmessLatencyDirect(Tun2socksVmess* _Nullable profile, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

@class Tun2socksLogService;

@class Tun2socksPacketFlow;

@class Tun2socksQuerySpeed;

@class Tun2socksTestDownload;

@class Tun2socksTestLatency;

@class Tun2socksTestLatencyStop;

@class Tun2socksVpnService;

@interface Tun2socksLogService : NSObject <goSeqRefInterface, Tun2socksLogService> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)writeLog:(NSString* _Nullable)s error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PacketFlow should be implemented in Java/Kotlin.
 */
@interface Tun2socksPacketFlow : NSObject <goSeqRefInterface, Tun2socksPacketFlow> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * WritePacket should writes packets to the TUN fd.
 */
- (void)writePacket:(NSData* _Nullable)packet;
@end

@interface Tun2socksQuerySpeed : NSObject <goSeqRefInterface, Tun2socksQuerySpeed> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)updateTraffic:(int64_t)up down:(int64_t)down;
@end

@interface Tun2socksTestDownload : NSObject <goSeqRefInterface, Tun2socksTestDownload> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)updateSpeed:(long)id_ speed:(int64_t)speed elapse:(int64_t)elapse;
- (void)updateTraffic:(long)id_ traffic:(int64_t)traffic;
@end

@interface Tun2socksTestLatency : NSObject <goSeqRefInterface, Tun2socksTestLatency> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)updateLatency:(long)id_ elapsed:(int64_t)elapsed;
@end

@interface Tun2socksTestLatencyStop : NSObject <goSeqRefInterface, Tun2socksTestLatencyStop> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)updateLatency:(long)id_ elapsed:(int64_t)elapsed;
@end

/**
 * VpnService should be implemented in Java/Kotlin.
 */
@interface Tun2socksVpnService : NSObject <goSeqRefInterface, Tun2socksVpnService> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Protect is just a proxy to the VpnService.protect() method.
See also: https://developer.android.com/reference/android/net/VpnService.html#protect(int)
 */
- (BOOL)protect:(long)fd;
@end

#endif
